@model StudentSquads.ViewModels.WorkViewModel
@{
	ViewBag.Title = "WorkEditForm";
}

<h2>Редактирование выездного списка</h2>
<button class="btn btn-warning js-change">Сохранить</button>
<button class="btn btn-default js-delete"data-id="@Model.Id">Удалить</button>
@using (Html.BeginForm("Delete", "Works"))
{

	@*<input type="submit" name="button2" value="Удалить" class="btn btn-default" formaction="@Url.Action("Delete", "Works")" />*@
	@Html.HiddenFor(m => m.Id, new { @id = "Id" })
	<div class="form-group">
		@Html.LabelFor(m => m.Employer)
		<div class="tt-container">
			@Html.TextBoxFor(m => m.Employer, new { @dataId = Model.EmployerId, @id = "employerid", @class = "form-control" })
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.WorkProject)
		@Html.TextBoxFor(m => m.WorkProject, new { @id = "workproject", @class = "form-control" })
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.DateofBegin) (@Model.DateofBegin.ToString("dd.MM.yyyy"))
		@Html.TextBoxFor(m => m.DateofBegin, "{0:yyyy.MM.dd}", new { @type = "date", @id = "dateofbegin", @class = "form-control" })
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.DateofEnd) (@Model.DateofEnd.ToString("dd.MM.yyyy"))
		@Html.TextBoxFor(m => m.DateofEnd, "{0:dd.MM.yyyy}", new { @type = "date", @id = "dateofend", @class = "form-control" })
	</div>
	<div class="form-group">
		<label>Член отряда</label>
		<div class="tt-container">
			<input id="member" type="text" class="form-control" name="" value="" />
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.FIO)
		@Html.TextBoxFor(m => m.FIO, new { @id = "member", @class = "form-control", @readonly = "readonly" })
	</div>
	<div class="checkbox">
		<label>
			@Html.CheckBoxFor(m => m.Alternative, new { @id = "alternative" }) Альтернативная целина?
		</label>
	</div>
}

@section scripts
{
	@*@Scripts.Render("~/bundles/jqueryval")*@
	<script>
		$(document).ready(function () {
			var vm = { MembersIds: [] };
			var employers = new Bloodhound({
				datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Name'),
				queryTokenizer: Bloodhound.tokenizers.whitespace,
				remote: {
					url: '/api/Employers?query=%QUERY',
					wildcard: '%QUERY'
				}
			});

			$('#employerid').typeahead({
				minLength: 3,
				highlight: true
			}, {
				name: 'employers',
				display: 'Name',
				source: employers
			}).on("typeahead:select", function (e, employer) {
				employerid.setAttribute('dataid', employer.Id);
				vm.EmployerId = employer.Id;
			});
			////Изменение
			$(".js-change").on("click", function () {
				var button = $(this);
				//vm.HeadofStudentSquadsId = button.attr("data-id");
				//vm.PersonId = document.getElementById('personId').value;
				//vm.Position = document.getElementById('position').value;
				vm.Alternative = document.getElementById('alternative').value;
				vm.DateOfBegin = document.getElementById('dateofbegin').value;
				vm.DateOfEnd = document.getElementById('dateofend').value;
				vm.Id = document.getElementById('Id').value;
				$.ajax({
					url: "/api/works",
					method: "post",
					data: vm
				})
					.done(function () {
						toastr.success("Успешно сохранено");
					})
					.fail(function () {
						toastr.error("Произошла ошибка сохранения");
					});

			});
			$(".js-delete").on("click", function () {
				var button = $(this);
				var vm = {};
				bootbox.confirm("Вы уверены, что хотите удалить запись в выездном списке?", function () {
					$.ajax({
						url: "/api/works/" + button.attr("data-id"),
						method: "DELETE",
						success: function () {
							bootbox.alert("Запись удалена из списка", function () {
								window.location = "/works/allworks"
							}
							);
						}

					});

				});
			});

		});
	</script>
}

