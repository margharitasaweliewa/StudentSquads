@model StudentSquads.ViewModels.WorkViewModel
@{
	ViewBag.Title = "WorkEditForm";
}
<h2>Редактирование выездного списка</h2>
@Html.HiddenFor(m => m.Audit, new { @id = "audit" })
@if (User.IsInRole("SquadManager"))
{
	<button id="auditsave"  class="btn btn-warning js-change" type="submit">Сохранить</button>
	<button id="auditdelete" class="btn btn-default js-delete" data-work-id="@Model.Id" type="submit">Удалить</button>
}
@if (User.IsInRole("RegionalManager"))
{
	<button id="rebuke" data-work-id="@Model.Id" class="btn btn-warning js-rebuke" type="submit">Выписать выговор</button>
}
@using (Html.BeginForm("Delete", "Works"))
{

	@*<input type="submit" name="button2" value="Удалить" class="btn btn-default" formaction="@Url.Action("Delete", "Works")" />*@
	@Html.HiddenFor(m => m.Id, new { @id = "Id" })
	@Html.HiddenFor(m => m.OriginalWorkId, new { @id = "OriginalWorkId" })
	@Html.HiddenFor(m => m.MemberId, new { @id = "MemberId" })
	<div class="form-group">
		@Html.LabelFor(m => m.Employer)
		<div class="tt-container">
			@Html.TextBoxFor(m => m.Employer, new { @dataId = Model.EmployerId, @id = "employerid", @class = "form-control" })
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.WorkProject)
		@Html.TextBoxFor(m => m.WorkProject, new { @id = "workproject", @class = "form-control" })
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.DateofBegin) (@Model.DateofBegin.ToString("dd.MM.yyyy"))
		@Html.TextBoxFor(m => m.DateofBegin, "{0:yyyy.MM.dd}", new { @type = "date", @id = "dateofbegin", @class = "form-control" })
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.DateofEnd) (@Model.DateofEnd.ToString("dd.MM.yyyy"))
		@Html.TextBoxFor(m => m.DateofEnd, "{0:dd.MM.yyyy}", new { @type = "date", @id = "dateofend", @class = "form-control" })
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.FIO)
		@Html.TextBoxFor(m => m.FIO, new { @id = "member", @class = "form-control", @readonly = "readonly" })
	</div>
	<div class="checkbox">
		<label>
			@Html.CheckBoxFor(m => m.Alternative, new { @id = "alternative" }) Альтернативная целина?
		</label>
	</div>
}
@if (Model.Versions != null)
{
	<h4>История изменений</h4>
	<table id="worksaudit" class="table table-bordered table-hover">
		<thead>
			<tr>
				<th>ФИО</th>
				<th>Работодатель</th>
				<th>Дата начала</th>
				<th>Дата окончания</th>
				<th>Дата создания</th>
				<th>Вид изменения</th>
				<th>Утверждено</th>
				@if ((User.IsInRole("RegionalManager")))
				{
					<th>Утвердить</th>
					<th>Отклонить</th>
				}
			</tr>
		</thead>
		<tbody>
			@for (int i = 0; i < Model.Versions.Count; i++)
			{
				@Model.Versions[i].Approved
				<tr>
					<td>@Model.Versions[i].FIO</td>
					<td>@Model.Versions[i].Employer</td>
					<td>@Model.Versions[i].DateofBeginString</td>
					<td>@Model.Versions[i].DateofEndString</td>
					<td>@Model.Versions[i].CreateTime</td>
					<td>@Model.Versions[i].ChangeType</td>
					<td>@Model.Versions[i].ApprovedString</td>
					@if (Model.Versions[i].Approved == null && (User.IsInRole("RegionalManager")))
					{
						<td><button class='btn-link js-approve' data-work-id=@Model.Versions[i].Id>Утвердить</button></td>
						<td><button class='btn-link js-reject' data-work-id=@Model.Versions[i].Id>Отклонить</button></td>
					}

				</tr>
			}
		</tbody>
	</table>
}

@section scripts
{
	@*@Scripts.Render("~/bundles/jqueryval")*@
	<script>
		$(document).ready(function () {
			var vm = { MembersIds: [] };
			var employers = new Bloodhound({
				datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Name'),
				queryTokenizer: Bloodhound.tokenizers.whitespace,
				remote: {
					url: '/api/Employers?query=%QUERY',
					wildcard: '%QUERY'
				}
			});

			$('#employerid').typeahead({
				minLength: 3,
				highlight: true
			}, {
				name: 'employers',
				display: 'Name',
				source: employers
			}).on("typeahead:select", function (e, employer) {
				employerid.setAttribute('dataid', employer.Id);
				vm.EmployerId = employer.Id;
			});
			////Изменение
			$(".js-change").on("click", function () {
				var button = $(this);
				var check = $('#alternative');
				if (check.is(':checked')) {
					vm.Alternative = true;
				}
				else {
					vm.Alternative = false;
				}
				vm.DateOfBegin = document.getElementById('dateofbegin').value;
				vm.DateOfEnd = document.getElementById('dateofend').value;
				vm.Id = document.getElementById('Id').value;
				vm.MemberId = document.getElementById('MemberId').value;
				vm.OriginalWorkId = document.getElementById('OriginalWorkId').value;
				var aud = document.getElementById('audit').value;
				if (aud == "True") vm.Audit = true;
				$.ajax({
					url: "/api/works",
					method: "post",
					data: vm
				})
					.done(function () {
						toastr.success("Успешно сохранено");
					})
					.fail(function () {
						toastr.error("Произошла ошибка сохранения");
					});

			});
			$(".js-delete").on("click", function () {
				var button = $(this);
				var vm = {};
				var aud = document.getElementById('audit').value;
				//Если аудита нет
				if (aud == "True") {
					bootbox.prompt("Вы уверены, что хотите удалить запись в выездном списке?\nУкажите причину:", function (result) {
						if (result) {
							$.ajax({
								url: "/api/works/" + button.attr("data-work-id") + "/" + result,
								method: "DELETE",
								success: function () {
									bootbox.alert("Запись удалена из списка. Ожидайте утверждения изменений", function () {
										window.location = "/works/allworks"
									});

								}

							});
						}
					});
				}
				else {
					bootbox.confirm("Вы уверены, что хотите удалить запись в выездном списке?", function (result) {
						if (result) {
							$.ajax({
								url: "/api/works/" + button.attr("data-work-id"),
								method: "DELETE",
								success: function () {
									bootbox.alert("Запись удалена из списка", function () {
										window.location = "/works/allworks"
									}
									);
								}

							});
						}
					});

				}

			});
			//Утверждение изменений
			$("#worksaudit").on("click", ".js-approve", function () {
				var button = $(this);

				bootbox.confirm("Вы уверены, что хотите утвердить изменения?", function (result) {
					if (result) {
						$.ajax({
							url: "/api/worksaudit/" + button.attr("data-work-id"),
							method: "POST",
							success: function () {
								toastr.success("Изменения утверждены");
							}
						});
					}
				});
			});
			//Отклонение изменений
			$("#worksaudit").on("click", ".js-reject", function () {
				var button = $(this);

				bootbox.confirm("Вы уверены, что хотите отклонить изменения?", function (result) {
					if (result) {
						$.ajax({
							url: "/api/worksaudit/" + button.attr("data-work-id"),
							method: "PUT",
							success: function () {
								toastr.success("Изменения отклонены");
							}
						});
					}
				});
			});
			$(".js-rebuke").on("click", function () {
				var button = $(this);
				bootbox.prompt("Вы уверены, что хотите вынести выговор?\nУкажите причину:", function (result) {
					if (result) {
						$.ajax({
							url: "/api/squadworks/" + button.attr("data-work-id") + "/" + result,
							method: "DELETE",
							success: function () {
								bootbox.alert("Выговор вынесен", function () {
									window.location = "/works/allworks"
								}
								);
							}
						});
					}
				});
			});

		});
	</script>
}

